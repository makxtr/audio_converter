package main

import (
	database "audio_converter/db"
	"audio_converter/models"
	"audio_converter/repository"
	"audio_converter/utils"
	_ "database/sql"
	"encoding/hex"
	"fmt"
	"log"
	"os"
)

func main() {
	// 1Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
	database.InitDB()
	defer database.DB.Close() // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ü–µ

	// 2Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	repo := repository.NewUserRepository(database.DB)

	// 3Ô∏è‚É£ –ß–∏—Ç–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
	if len(os.Args) != 4 {
		fmt.Println("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: go run cmd/create_user/main.go <name> <email> <password>")
		os.Exit(1)
	}
	name := os.Args[1]
	email := os.Args[2]
	password := os.Args[3]

	// 4Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–ª—å –∏ —Ö–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
	salt := utils.GetSalt()
	hashedPassword := utils.HashPass(salt, password)

	// 5Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	user := &models.User{
		Name:     name,
		Email:    email,
		Password: hex.EncodeToString(hashedPassword),
	}
	if err := repo.CreateUser(user); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
	}

	fmt.Println("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
	fmt.Println("üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–æ–ª—å (hex):", hex.EncodeToString(salt))
}
